version: '3.4'

services:
  web:
    build: 
      dockerfile: Dockerfile_web
    container_name: web
    environment:
      APP_NAME: Itinerary
      FLASK_ENV: development
      FLASK_DEBUG: 1
      SECRET_KEY: dev
      PORT: 8181
      FLASK_APP: src/entrypoint/web/main
      MONGODB_URL: mongodb://root:password@mongo:27017
      MONGODB_DB: itinerary
      URL: http://localhost:80
    ports:
      - "8181:80"
    volumes:
      - ./datalake:/app/datalake
      - "./src:/app/src"
    command: flask run --host=0.0.0.0 --port 80
    depends_on:
      - mongo

  clustering_api:
    build: 
      dockerfile: ./clustering_api/Dockerfile_clustering_api
    container_name: clustering_api
    #image: clustering-api:latest
    #container_name: clustering_api
    environment:
      APP_NAME: Clustering_API
      FLASK_ENV: development
      FLASK_DEBUG: 1
      SECRET_KEY: dev
      PORT: 8282
      FLASK_APP: main
      URL: http://localhost:80
    ports:
      - "8282:80"
    volumes:
      - "./clustering_api:/app"
    command: flask run --host=0.0.0.0 --port 80

  mongo:
    image: mongo:6.0.4
    container_name: mongo
    restart: always
    ports:
    - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./volumes/mongo:/data/db

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8111:8081
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
    depends_on:
      - mongo

  postgres-airflow:
    image: postgres:14
    container_name: postgres-airflow
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    env_file:
      - .env

  scheduler-airflow:
    build: 
      dockerfile: Dockerfile_airflow
    user: "${AIRFLOW_UID}:0"
    env_file: 
      - .env
    volumes:
      - ./datalake:/opt/airflow/dags/datalake
      - ./src:/opt/airflow/dags/src
      - ./volumes/airflow/logs:/opt/airflow/logs
      - ./volumes/airflow/plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      mongo:
        condition: service_started
      postgres-airflow:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    container_name: airflow-scheduler
    command: scheduler
    restart: on-failure
    ports:
      - "8793:8793"
      - "6006:6006"

  webserver-airflow:
    build: 
      dockerfile: Dockerfile_airflow
    user: "${AIRFLOW_UID}:0"
    env_file: 
      - .env
    volumes:
      - ./datalake:/opt/airflow/dags/datalake
      - ./src:/opt/airflow/dags/src
      - ./volumes/airflow/logs:/opt/airflow/logs
      - ./volumes/airflow/plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:    
      mongo:
        condition: service_started
      postgres-airflow:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    container_name: airflow-webserver
    restart: always
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 30s
      retries: 5
  
  airflow-init:
    build: 
      dockerfile: Dockerfile_airflow
    user: "${AIRFLOW_UID}:0"
    env_file: 
      - .env
    volumes:
      - ./datalake:/opt/airflow/dags/datalake
      - ./src:/opt/airflow/dags/src
      - ./volumes/airflow/logs:/opt/airflow/logs
      - ./volumes/airflow/plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    